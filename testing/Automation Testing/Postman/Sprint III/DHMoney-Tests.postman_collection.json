{
	"info": {
		"_postman_id": "36baf3db-a42c-4f4f-9b92-d4ba6ebb8ffc",
		"name": "DHMoney-Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16623392"
	},
	"item": [
		{
			"name": "Registro exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.cvu).to.be.a('string')\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.alias).to.be.a('string')\r",
							"})\r",
							"pm.test(\"Save user username and password\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"   postman.setEnvironmentVariable(\"username\", response.username)\r",
							"   postman.setEnvironmentVariable(\"password\", response.password)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : {{username}},\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": {{password}}\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante Nombre",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito1\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante Apellido",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito2\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante Dni",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito3\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"username\" : \"marcelito4\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante telefono",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito5\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante contrasenia",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito6\",\r\n    \"phoneNumber\" : \"47786998\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Nombre null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": null,\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito7\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Apellido Null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": null,\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito8\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Dni null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\": null,\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito9\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo email null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\": null,\r\n    \"username\" : \"marcelito10\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo username null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : null,\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo phonenumber null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito11\",\r\n    \"phoneNumber\": null,\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo contraseña null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito12\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": null\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Nombre empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito13\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Apellido empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\" : \"\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito14\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Dni empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\": \"\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito15\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo email empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\": \"\",\r\n    \"username\" : \"marcelito16\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo username empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo phonenumber empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito17\",\r\n    \"phoneNumber\": \"\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo contraseña empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito18\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\":\"\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Username existente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\":\"marcelito12345\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user",
					"host": [
						"{{host}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User By ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "10",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{host}}/user/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Firstname",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo Javier\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Mendoza Salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" : \"44444444\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"marcelomendoza@mail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Telefono",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phoneNumber\" : \"2646252787\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"marcelo.salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\" : \"salinas123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Alias",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"alias\" : \"whisky.romeo.zulu\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & LastName",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Lorenzo\",\r\n    \"lastName\" : \"Mendoza Salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName && Dni",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Carlos Marcelo\",\r\n    \"dni\" : \"33333333\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Hugo Marcelo\",\r\n    \"email\" : \"hugomarcelomendoza@mail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & Telefono",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" :\"Horacio Marcelo\",\r\n    \"phoneNumber\" : \"2646254565\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Pablo Marcelo\",\r\n    \"username\" : \"pablomarcelo.salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Pedro Marcelo\",\r\n    \"password\" : \"pedro.salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName && Dni",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Salinas Mendoza\",\r\n    \"dni\" : \"12345678\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName & Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Salinas Perez\",\r\n    \"email\" : \"marcelosalinasperez@mail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName & Telefono",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" :\"Salinas Bossi\",\r\n    \"phoneNumber\" : \"2646251111\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName & Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Salinas Mejia\",\r\n    \"username\" : \"marcelomejia\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName & Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Salinas Gutierrez\",\r\n    \"password\" : \"m.salinas.123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni & Telefono",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" :\"22222222\",\r\n    \"phoneNumber\" : \"2646252222\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni & Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" : \"33333333\",\r\n    \"username\" : \"marcelomejia22\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni & Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" : \"44444444\",\r\n    \"password\" : \"m.salinas.444\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Email & Telefono",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" :\"salinas@mail.com\",\r\n    \"phoneNumber\" : \"47785458\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Email & Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"mejia3@mail.com\",\r\n    \"username\" : \"marcelomejia1456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Email & Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"mmejiasalinas@mail.com\",\r\n    \"password\" : \"m.mejia.123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Telefono & Username",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phoneNumber\" : \"47717082\",\r\n    \"username\" : \"marmejia15\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Telefono & Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phoneNumber\" : \"45420582\",\r\n    \"password\" : \"m.sali.mejia\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Username & Password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"mguti123\",\r\n    \"password\" : \"m.guti.777\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar User complete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Pablo Lucas\",\r\n    \"lastName\" : \"Medina Gutierrez\",\r\n    \"dni\":\"28795485\",\r\n    \"email\": \"pablomedina@mail.com\",\r\n    \"phoneNumber\":\"47717085\",\r\n    \"username\" : \"mguti123\",\r\n    \"password\" : \"m.guti.777\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Firstname Null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Username Null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Password Null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\" : null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Firstname Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni & Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" : \"11111111\",\r\n    \"email\" : \"salinas123@mail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Username Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Password Empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\" : \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar User complete empty",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\" : \"\",\r\n    \"dni\":\"\",\r\n    \"email\": \"\",\r\n    \"phoneNumber\":\"\",\r\n    \"username\" : \"\",\r\n    \"password\" : \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{user_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{user_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Save user token\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"   postman.setEnvironmentVariable(\"Token\", response.token)\r",
							"})\r",
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.cvu).to.be.a('string')\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.alias).to.be.a('string')\r",
							"})\r",
							"pm.test(\"Password not to be present\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(pm.response.text()).not.to.include(\"password\")|| \r",
							"    pm.expect(pm.response.text()).not.to.include(\"Password\")||\r",
							"    pm.expect(pm.response.text()).not.to.include(\"PASSWORD\")\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"{{username}}\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Usuario inexistente",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"miguelito\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Usuario null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :null,\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Usuario vacio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Contraseña incorrecta",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"{{username}}\",\r\n    \"password\": \"miguel123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Contraseña null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"{{username}}\",\r\n    \"password\": null\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Contraseña vacío",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"{{username}}\",\r\n    \"password\": \"\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout exitoso",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/user/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout fallido sin Token",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{host}}/user/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout fallido Token incorrecto",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "holacomoestas123456",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/user/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una tarjeta",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\" : \"5\",\r\n    \"type\" : \"Credito\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una tarjeta sin Account ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check response message\", () =>{\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.equals(\"Falta completar el campo AccountId\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\" : \"\",\r\n    \"type\" : \"Débito\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una tarjeta con Account ID = null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check response message\", () =>{\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.equals(\"Falta completar el campo AccountId\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\" : null,\r\n    \"type\" : \"Débito\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una tarjeta sin Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check response message\", () =>{\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.equals(\"Falta completar el campo Type\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"accountId\" : 1\r\n   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una tarjeta con Type = null",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check response message\", () =>{\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.equals(\"Falta completar el campo Type\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"accountId\" : 1\r\n   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una tarjeta con todos los campos vacíos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check response message\", () =>{\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.equals(\"Debe completar todos los campos\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"accountId\" : \"\",\r\n   \"type\": \"\"\r\n   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Agregar una tarjeta con todos los campos NULL",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check response message\", () =>{\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.equals(\"Debe completar todos los campos\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"accountId\" : null,\r\n   \"type\": null\r\n   \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todas las tarjetas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"Status 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.id!==null ||\r",
							"        response.accountId !== null ||\r",
							"        response.type !== null ).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate type to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].type).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/cards",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener todas las tarjetas por Id de tarjeta",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"Status 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.id!==null ||\r",
							"        response.accountId !== null ||\r",
							"        response.type !== null ).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate type to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].type).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/cards/{{card_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards",
						"{{card_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obtener una tarjeta por Id de Cuenta",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"Status 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.id!==null ||\r",
							"        response.accountId !== null ||\r",
							"        response.type !== null ).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate type to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].type).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/account/cards?id={{account_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"account",
						"cards"
					],
					"query": [
						{
							"key": "id",
							"value": "{{account_id}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Modificar una tarjeta",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"Status 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.id!==null ||\r",
							"        response.accountId !== null ||\r",
							"        response.type !== null ).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate type to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].type).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\" : \"2\",\r\n    \"type\" : \"Débito\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards/{{card_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards",
						"{{card_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modificar una tarjeta - Faltante campo tipo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check response message\", () =>{\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.equals(\"Falta completar el campo tipo\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountId\" : \"2\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards/{{card_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards",
						"{{card_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Modificar una tarjeta - Faltante campo AccountId",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check response message\", () =>{\r",
							"    let response = pm.response.text();\r",
							"    pm.expect(response).to.be.equals(\"Falta completar el campo account id\")\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"type\" : \"Debito\"\r\n    \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/cards/{{card_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards",
						"{{card_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar tarjeta por Id de tarjeta",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"Status code\", function(){\r",
							"    pm.response.to.have.status(204);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/cards/{{card_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"cards",
						"{{card_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Crear una transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"Status 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.id!==null ||\r",
							"        response.accountId !== null ||\r",
							"        response.type !== null ).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate detail to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].detail).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate type to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].type).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountOriginId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountOriginId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountDestinyId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountDestinyId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate amount to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].amount).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate date to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].date).to.be.a(\"String\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountOriginId\": 25,\r\n    \"accountDestinyId\" : 12,\r\n    \"amount\": 50.0,\r\n    \"date\" : \"2022-11-08\",\r\n    \"detail\": \"Prestamo\",\r\n    \"type\" : \"debito\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/transactions/",
					"host": [
						"{{host}}"
					],
					"path": [
						"transactions",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Modificar una transaction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"Status 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.id!==null ||\r",
							"        response.accountId !== null ||\r",
							"        response.type !== null ).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate detail to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].detail).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate type to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].type).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountOriginId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountOriginId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountDestinyId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountDestinyId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate amount to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].amount).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate date to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].date).to.be.a(\"String\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"accountOriginId\": 1,\r\n    \"accountDestinyId\" : 2,\r\n    \"amount\": 150.0,\r\n    \"date\" : \"2022-11-08\",\r\n    \"detail\": \"Prestamo\",\r\n    \"type\" : \"debito\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/transactions/{{transaction_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"transactions",
						"{{transaction_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transactions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"Status 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.id!==null ||\r",
							"        response.accountId !== null ||\r",
							"        response.type !== null ).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate detail to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].detail).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate type to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].type).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountOriginId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountOriginId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountDestinyId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountDestinyId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate amount to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].amount).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate date to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].date).to.be.a(\"String\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:8080/transaction",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"transaction"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get transactions por ID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"Status 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.id!==null ||\r",
							"        response.accountId !== null ||\r",
							"        response.type !== null ).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate detail to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].detail).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate type to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].type).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountOriginId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountOriginId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate accountDestinyId to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].accountDestinyId).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate amount to be a number\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].amount).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate date to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].date).to.be.a(\"String\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{host}}/transactions/{{transaction_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"transactions",
						"{{transaction_id}}"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Eliminar una transacción por Id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"\r",
							"pm.test (\"Status 200\", function(){\r",
							"    pm.response.to.have.status(204);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{host}}/transactions/{{transaction_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"transactions",
						"{{transaction_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar alias por Id de Account",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"alias\": \"sudo.apt.get\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/account/{{account_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"account",
						"{{account_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar alias por Id de Account Vacío",
			"request": {
				"method": "PATCH",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"alias\": \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/account/{{account_id}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"account",
						"{{account_id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get all account activities Copy",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get all account activities - wrong account_id Copy",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get all account activities sin token Copy",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get all account activities con token invalido Copy",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get all account activities por Id con token invalido Copy",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get account activities by ID Copy",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get all account activities por Id sin token Copy",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get all account activities por Id - Account Id incorrecto Copy",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Get all account activities por Id - Transaction Id incorrecto Copy",
			"request": {
				"method": "GET",
				"header": []
			},
			"response": []
		},
		{
			"name": "Realizar una transferencia exitosa Copy",
			"request": {
				"method": "POST",
				"header": []
			},
			"response": []
		},
		{
			"name": "Realizar una transferencia con valores null - Card ID Copy",
			"request": {
				"method": "POST",
				"header": []
			},
			"response": []
		},
		{
			"name": "Realizar una transferencia con valores null - Destiny Account Copy",
			"request": {
				"method": "POST",
				"header": []
			},
			"response": []
		},
		{
			"name": "Realizar una transferencia con valores null - Amount Copy",
			"request": {
				"method": "POST",
				"header": []
			},
			"response": []
		},
		{
			"name": "Realizar una transferencia con valores null - Date Copy",
			"request": {
				"method": "POST",
				"header": []
			},
			"response": []
		},
		{
			"name": "Realizar una transferencia sin Token Copy",
			"request": {
				"method": "POST",
				"header": []
			},
			"response": []
		},
		{
			"name": "Realizar una transferencia con Token inválido Copy",
			"request": {
				"method": "POST",
				"header": []
			},
			"response": []
		}
	]
}