{
	"info": {
		"_postman_id": "99cfec82-e075-4d7e-8a3b-9dc7d854052e",
		"name": "Peticiones User Completas",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "16623392"
	},
	"item": [
		{
			"name": "Registro exitoso Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.cvu).to.be.a('string')\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.alias).to.be.a('string')\r",
							"})\r",
							"pm.test(\"Save user username and password\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"   postman.setEnvironmentVariable(\"username\", response.username)\r",
							"   postman.setEnvironmentVariable(\"password\", response.password)\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante Nombre Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito1\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante Apellido Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito2\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante Dni Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito3\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante email Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"username\" : \"marcelito4\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante Username Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante telefono Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito5\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Faltante contrasenia Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito6\",\r\n    \"phoneNumber\" : \"47786998\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Nombre null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": null,\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito7\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Apellido Null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": null,\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito8\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Dni null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\": null,\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito9\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo email null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\": null,\r\n    \"username\" : \"marcelito10\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo username null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : null,\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo phonenumber null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito11\",\r\n    \"phoneNumber\": null,\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo contraseña null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito12\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": null\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Nombre empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito13\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Nombre  numérico Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": 1234,\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito19\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Apellido empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\" : \"\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito14\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Apellido numérico Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\" : 12345,\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito20\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Dni empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\": \"\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito15\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo Dni numérico Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\": 123456,\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito21\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo email empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\": \"\",\r\n    \"username\" : \"marcelito16\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo email numerico Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\": 12356,\r\n    \"username\" : \"marcelito22\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo username empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo username numérico Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : 123456,\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo phonenumber empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito17\",\r\n    \"phoneNumber\": \"\",\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo phonenumber numérico Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito23\",\r\n    \"phoneNumber\": 123456,\r\n    \"password\": \"marcelo15555\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo contraseña empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito18\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\":\"\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Campo contraseña empty Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito24\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\":123456\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Registro fallido - Username existente Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo\",\r\n    \"lastName\": \"Lopez\",\r\n    \"dni\" : \"45985745\",\r\n    \"email\" : \"marcelito@mail.com\",\r\n    \"username\" : \"marcelito\",\r\n    \"phoneNumber\" : \"47786998\",\r\n    \"password\":\"marcelito12345\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/register",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Users Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user",
					"host": [
						"{{host}}"
					],
					"path": [
						"user"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get User By ID Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "",
						"value": "10",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{host}}/user/{{id_user}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"{{id_user}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Firstname Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Marcelo Javier\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Mendoza Salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" : \"44444444\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Email Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"marcelomendoza@mail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Telefono Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phoneNumber\" : \"2646252787\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Username Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"marcelo.salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\" : \"salinas123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & LastName Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Lorenzo\",\r\n    \"lastName\" : \"Mendoza Salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName && Dni Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Carlos Marcelo\",\r\n    \"dni\" : \"33333333\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & Email Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Hugo Marcelo\",\r\n    \"email\" : \"hugomarcelomendoza@mail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & Telefono Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" :\"Horacio Marcelo\",\r\n    \"phoneNumber\" : \"2646254565\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & Username Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Pablo Marcelo\",\r\n    \"username\" : \"pablomarcelo.salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar FirstName & Password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"Pedro Marcelo\",\r\n    \"password\" : \"pedro.salinas\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName && Dni Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Salinas Mendoza\",\r\n    \"dni\" : \"12345678\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName & Email Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Salinas Perez\",\r\n    \"email\" : \"marcelosalinasperez@mail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName & Telefono Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" :\"Salinas Bossi\",\r\n    \"phoneNumber\" : \"2646251111\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName & Username Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Salinas Mejia\",\r\n    \"username\" : \"marcelomejia\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar LastName & Password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"lastName\" : \"Salinas Gutierrez\",\r\n    \"password\" : \"m.salinas.123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni & Email Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" : \"11111111\",\r\n    \"email\" : \"salinas123@mail.com\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni & Telefono Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" :\"22222222\",\r\n    \"phoneNumber\" : \"2646252222\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni & Username Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" : \"33333333\",\r\n    \"username\" : \"marcelomejia22\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Dni & Password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"dni\" : \"44444444\",\r\n    \"password\" : \"m.salinas.444\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Email & Telefono Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" :\"salinas@mail.com\",\r\n    \"phoneNumber\" : \"47785458\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Email & Username Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"mejia3@mail.com\",\r\n    \"username\" : \"marcelomejia1456\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Email & Password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\" : \"mmejiasalinas@mail.com\",\r\n    \"password\" : \"m.mejia.123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Telefono & Username Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phoneNumber\" : \"47717082\",\r\n    \"username\" : \"marmejia15\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Telefono & Password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"phoneNumber\" : \"45420582\",\r\n    \"password\" : \"m.sali.mejia\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Username & Password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"mguti123\",\r\n    \"password\" : \"m.guti.777\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar User complete Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							"pm.test(\"Content-Type header is application/json\", () => {\r",
							"  pm.expect(pm.response.headers.get('Content-Type')).to.eql('application/json');\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Not null values\", function () {\r",
							"    let response = pm.response.json();\r",
							"    pm.expect(response.firstName!==null ||\r",
							"        response.lastName !== null ||\r",
							"        response.email !== null ||\r",
							"        response.cvu !== null ||\r",
							"        response.alias !== null ||\r",
							"        response.username !== null ||\r",
							"        response.dni !== null ||\r",
							"        response.phoneNumber !== null).to.be.true\r",
							"});\r",
							"pm.test(\"Not empty response\", function() {\r",
							"    response = pm.response.json()\r",
							"    \r",
							"    pm.expect(response.length)>0\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate not to be undefined\", function () {\r",
							"   \r",
							"    let response = pm.response.json();\r",
							"    for(let i=0; i < response.length; i++){\r",
							"        pm.expect(response[i]).not.to.be.undefined   \r",
							"    }\r",
							"   });\r",
							"\r",
							"pm.test(\"Validate ID is a number\",function(){\r",
							"    let response = pm.response.json();\r",
							"   for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].id).to.be.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate email to be string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].email).to.be.a(\"string\")\r",
							"    pm.expect(response[i].email).contains(\"@\")\r",
							"    pm.expect(response[i].email).contains(\".com\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate lastName to be a String\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].lastName).to.be.a(\"String\")\r",
							"    pm.expect(response[i].lastName).not.contains.a(\"number\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate firstName to be a string\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].firstName).to.be.a(\"string\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate response to be an object\", function(){\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i]).to.be.an(\"object\")\r",
							"   }\r",
							"})\r",
							"pm.test(\"Validate cvu to be a string\", ()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].cvu).to.be.a('string')}\r",
							"})\r",
							"pm.test(\"Validate alias to be a string\",()=>{\r",
							"    let response = pm.response.json();\r",
							"    for (let i=0; i<response.length;i++){\r",
							"    pm.expect(response[i].alias).to.be.a('string')}\r",
							"})"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Pablo Lucas\",\r\n    \"lastName\" : \"Medina Gutierrez\",\r\n    \"dni\":\"28795485\",\r\n    \"email\": \"pablomedina@mail.com\",\r\n    \"phoneNumber\":\"47717085\",\r\n    \"username\" : \"mguti123\",\r\n    \"password\" : \"m.guti.777\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Firstname Null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Username Null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Password Null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\" : null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Firstname Empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\" : \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Username Empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" : \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar Password Empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\" : \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Editar User complete empty Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"\",\r\n    \"lastName\" : \"\",\r\n    \"dni\":\"\",\r\n    \"email\": \"\",\r\n    \"phoneNumber\":\"\",\r\n    \"username\" : \"\",\r\n    \"password\" : \"\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/update/{{id_usuario}}",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"update",
						"{{id_usuario}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Usuario inexistente Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(404);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"miguelito\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Usuario null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :null,\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Usuario vacio Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"\",\r\n    \"password\": \"{{password}}\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Contraseña incorrecta Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"{{username}}\",\r\n    \"password\": \"miguel123\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Contraseña null Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"{{username}}\",\r\n    \"password\": null\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login fallido - Contraseña vacío Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check the active environment\", () => {\r",
							"  pm.expect(pm.environment.name).to.eql(\"Local\");\r",
							"});\r",
							"pm.test (\"New User\", function(){\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"username\" :\"{{username}}\",\r\n    \"password\": \"\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{host}}/user/login",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout exitoso Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "{{Token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/user/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout fallido sin Token Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "",
						"type": "text",
						"disabled": true
					}
				],
				"url": {
					"raw": "{{host}}/user/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout fallido Token incorrecto Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "holacomoestas123456",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{host}}/user/logout",
					"host": [
						"{{host}}"
					],
					"path": [
						"user",
						"logout"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id_usuario",
			"value": "",
			"type": "string"
		}
	]
}